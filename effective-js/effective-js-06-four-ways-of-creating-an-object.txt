هر چهار نوع تعریف ابجکتی که در تصویر می بینید یکی هستن و فرقی ندارن

وقتی یه ابجکت رو میسازیم هرچند به نظر میرسه که داریم ی متغیر تعریف میکنیم
const person = {};
اما واقیت اینه که داریم از کلاس ابجکت اصلی ارث میبریم
در واقع این متغیر پرسون متد ها
Object
رو به ارث میبره
کجا؟ رو پروتوتایپ خودش اینجا
person.prototype

این ابجکت پیچیده تره
حافظه ی بیشتری رو میگیره

و معادل ش در نسخه ۶ و سایر زبان های کلاس داره میشه
class Person extends Object { ... };
const person = new Person();

نکته ای که باید بدونیم اینه که اگر از ابجکت فقط به عنوان داده استفاده میکنیم
احتیاج به این ارث بری نداریم
یعنی اگه فقط به عنوان دیکشنری - هش تیبل
hash table
مثل فایل جی سان که داده داره ولی متد نداره

برای تعریف ابجکت خالی هم باید پروتوتایپ رو نال کنیم
const person = Object.create( null );
این پرسون دیگه چیزی از ابجکت اصلی به ارث نبرده
person.toString; // undefined

این ابجکت ساده تره
حافظه ی کمتری رو میگیره

پس اگر از متد های ابجکت اصلی استفاده نمی کنیم که معمولا نمیکنیم
toString()
valueOf()
hasOwnProperty()
etc
از اون به ارث نبریم

const createObject = Object.create.bind( Object, null );
هم گزینه خوبیه برای سریع ایجاد کردن یه ابجمت خالی
مثال
const person = createObject();
person.toString; // undefined

بریم برای پست بعدی