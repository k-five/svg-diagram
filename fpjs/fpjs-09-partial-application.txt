فهمیدیم که میتونیم دو فیچر اصلی در زبان های فانکشنال یعنی
function
closure
رو با هم ترکیب کنیم و در یه خالت خاص
فانکشن های تو در تو تک ارگومانی باشن

حالا
partial application
یعنی همه ی این فانکشن های تو در تو رو با هم اجرا نکینم مثلا
const add = a => b => a + b;
رو میتونیم پشت سر هم اجرا کنیم
add( 5 )( 2 ); // 7
ولی این کار رو نمی کنیم و هر بار قستمی از اون رو اجرا میکنیم مثلا
const add5 = add( 5 );
قسمت اول رو اجرا کردیم حالا دومش
const result = add5( 2 );
حالا نتیجه رو داریم
console.log( result );  // 7

سوالی که اینجا به ذهن میاد
مخصوصا برای کسانی که با این شیوه اشنا نیست اینه که
به چه دردی میخوره این تکنیک؟
چه کاریه؟ چرا از اول راحت ننویسیم
const add = ( a, b ) => a + b;
و جواب راحت بشه
add( 5, 2 );  // 7

جواب اینه که یک کری فانکشن به تنها خیلی بدرد نمیخوره
زمانی قشنگ میشه که تعداد زیادی کری فانکشن داریم
و چون مجبور نیستم تمام فانکشن ها رو بکجا اجرا کنیم
میتونیم اونها رو با هم ترکیب کنیم یا
compose
کنیم

برای همین هست در
Ramda.js
همه ی فانکشن ها
by default
کری فانکشن هستن

پس خیلی ساده
partial application
یعنی استفاده ی خورد خورد از یه کری فانکشن
قسمت قسمت جلو رفتن تا به نتیجه رسیدن

به چیزی که این قسمت ها رو با هم ترکیب کنه چی میگیم؟
composition
که موضوع پست بعدی خواهد بود